//
// %%INTRO%%
//
// Copyright (C) %%COPYRIGHT%%
//
// %%LICENSE%%
//
//----------------------------------------------------------------------
/*!\file    %%FILE%%
 *
 * \author  %%AUTHOR%%
 *
 * \date    %%DATE%%
 *
 * \brief Contains g%%NAME%%
 *
 * \b g%%NAME%%
 *
 * %%DESCRIPTION%%
 *
 */
//----------------------------------------------------------------------
#ifndef %%SENTINEL%%
#define %%SENTINEL%%

#include "plugins/structure/tGroup.h"

//----------------------------------------------------------------------
// External includes (system with <>, local with "")
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Internal includes with ""
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Namespace declaration
//----------------------------------------------------------------------
%%OPEN_NAMESPACE%%

//----------------------------------------------------------------------
// Forward declarations / typedefs / enums
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Class declaration
//----------------------------------------------------------------------
//! %%SHORT_DESCRIPTION%%
/*!
 * %%DESCRIPTION%%
 */
class g%%NAME%% : public structure::tGroup
{

//----------------------------------------------------------------------
// Ports (These are the only variables that may be declared public)
//----------------------------------------------------------------------
public:

  tControllerInput<double> ci_signal_1;

//----------------------------------------------------------------------
// Public methods and typedefs
//----------------------------------------------------------------------
public:

  g%%NAME%%(core::tFrameworkElement *parent, const std::string &name = "%%NAME%%",
    %%INDENT_ONE_NAME%%const std::string &structure_config_file = __FILE__".xml");

//----------------------------------------------------------------------
// Private fields and methods
//----------------------------------------------------------------------
private:

  /*! Destructor
   *
   * The destructor of modules is declared private to avoid accidental deletion. Deleting
   * modules is already handled by the framework.
   */
  ~g%%NAME%%();

};

//----------------------------------------------------------------------
// End of namespace declaration
//----------------------------------------------------------------------
%%CLOSE_NAMESPACE%%
%%INCLUDE_HPP%%

#endif
