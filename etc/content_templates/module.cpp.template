//
// %%INTRO%%
//
// Copyright (C) %%COPYRIGHT%%
//
// %%LICENSE%%
//
//----------------------------------------------------------------------
/*!\file    %%FILE%%
 *
 * \author  %%AUTHOR%%
 *
 * \date    %%DATE%%
 *
 */
//----------------------------------------------------------------------
#include "%%HEADER_PATH%%"

//----------------------------------------------------------------------
// External includes (system with <>, local with "")
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Internal includes with ""
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Debugging
//----------------------------------------------------------------------
#include <cassert>

//----------------------------------------------------------------------
// Namespace usage
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Namespace declaration
//----------------------------------------------------------------------
%%OPEN_NAMESPACE%%

//----------------------------------------------------------------------
// Forward declarations / typedefs / enums
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Const values
//----------------------------------------------------------------------
runtime_construction::tStandardCreateModuleAction<m%%NAME%%> cCREATE_ACTION_FOR_M%%NAME_IN_UPPER_CASE%%("%%NAME%%");

//----------------------------------------------------------------------
// Implementation
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// m%%NAME%% constructor
//----------------------------------------------------------------------
m%%NAME%%::m%%NAME%%(core::tFrameworkElement *parent, const std::string &name) :
  tModule(parent, name),
  If you have some member variables, please initialize them here. Especially built-in types (like pointers!). Delete this line otherwise!
{}

//----------------------------------------------------------------------
// m%%NAME%% destructor
//----------------------------------------------------------------------
m%%NAME%%::~m%%NAME%%()
{}

//----------------------------------------------------------------------
// m%%NAME%% OnStaticParameterChange
//----------------------------------------------------------------------
void m%%NAME%%::OnStaticParameterChange()
{
  if (this->static_parameter_1.HasChanged())
  {
    As this static parameter has changed, do something with its value!
  }
}

//----------------------------------------------------------------------
// m%%NAME%% OnParameterChange
//----------------------------------------------------------------------
void m%%NAME%%::OnParameterChange()
{
  If this method is called, at least on of your parameters has changed. However, each can be checked using its .HasChanged() method.
}

//----------------------------------------------------------------------
// m%%NAME%% Update
//----------------------------------------------------------------------
void m%%NAME%%::Update()
{
  if (this->InputChanged())
  {
    At least one of your input ports has changed. Do something useful with its data.
    However, using the .HasChanged() method on each port you can check in more detail.
  }
  
  Do something each cycle independent from changing ports.
  
  this->output_signal_1.Publish(some meaningful value); can be used to publish data via your output ports.
}

//----------------------------------------------------------------------
// End of namespace declaration
//----------------------------------------------------------------------
%%CLOSE_NAMESPACE%%
