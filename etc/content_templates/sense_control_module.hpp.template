//
// %%INTRO%%
//
// Copyright (C) %%COPYRIGHT%%
//
// %%LICENSE%%
//
//----------------------------------------------------------------------
/*!\file    %%FILE%%
 *
 * \author  %%AUTHOR%%
 *
 * \date    %%DATE%%
 *
 */
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// External includes (system with <>, local with "")
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Internal includes with ""
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Debugging
//----------------------------------------------------------------------
#include <cassert>

//----------------------------------------------------------------------
// Namespace usage
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Namespace declaration
//----------------------------------------------------------------------
%%OPEN_NAMESPACE%%

//----------------------------------------------------------------------
// Forward declarations / typedefs / enums
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Const values
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Implementation
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// m%%NAME%% constructor
//----------------------------------------------------------------------
template <>
m%%NAME%%<>::m%%NAME%%(core::tFrameworkElement *parent, const std::string &name) :
  tSenseControlModule(parent, name),
  If you have some member variables, please initialize them here. Especially built-in types (like pointers!). Delete this line otherwise!
{}

//----------------------------------------------------------------------
// m%%NAME%% destructor
//----------------------------------------------------------------------
template <>
m%%NAME%%<>::~m%%NAME%%()
{}

//----------------------------------------------------------------------
// m%%NAME%% OnStaticParameterChange
//----------------------------------------------------------------------
template <>
void m%%NAME%%<>::OnStaticParameterChange()
{
  if (this->static_parameter_1.HasChanged())
  {
    As this static parameter has changed, do something with its value!
  }
}

//----------------------------------------------------------------------
// m%%NAME%% OnParameterChange
//----------------------------------------------------------------------
template <>
void m%%NAME%%<>::OnParameterChange()
{
  If this method is called, at least on of your parameters has changed. However, each can be checked using its .HasChanged() method.
}

//----------------------------------------------------------------------
// m%%NAME%% Sense
//----------------------------------------------------------------------
template <>
void m%%NAME%%<>::Sense()
{
  if (this->SensorInputChanged())
  {
    At least one of your sensor input ports has changed. Do something useful with its data.
    However, using the .HasChanged() method on each port you can check in more detail.
  }
  
  Do something each cycle independent from changing ports.
  
  this->so_signal_1.Publish(some meaningful value); can be used to publish data via your sensor output ports.
}

//----------------------------------------------------------------------
// m%%NAME%% Control
//----------------------------------------------------------------------
template <>
void m%%NAME%%<>::Control()
{
  if (this->ControllerInputChanged())
  {
    At least one of your controller input ports has changed. Do something useful with its data.
    However, using the .HasChanged() method on each port you can check in more detail.
  }
  
  Do something each cycle independent from changing ports.
  
  this->co_signal_1.Publish(some meaningful value); can be used to publish data via your sensor output ports.
}

//----------------------------------------------------------------------
// End of namespace declaration
//----------------------------------------------------------------------
%%CLOSE_NAMESPACE%%
